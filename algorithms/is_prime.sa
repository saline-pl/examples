fn isqrt :: n: Ord -> Ord
{* `math.isqrt` (poorly) reimplemented... *}
do
   ret sqrt(n).round()
end

fn is_prime :: n: Ord -> Bool
{*
   Adaptation of the Python code from the Primary test Wikipedia page:
   <https://en.wikipedia.org/wiki/Primality_test#Python>
*}
do
   if n <= 3 do
      ret n > 1
   else if n % 2 == 0 | n % 3 == 0 do
      ret FALSE
   end

   let limit = isqrt(n)

   for i in (5..=limit + 1).step_by(6)
   do
      if n % i == 0 | n % (i + 2) == 0 do
         ret FALSE
      end
   end

   ret TRUE
end

type Prime = { n: Ord & n.is_prime() }


fn main :: args: List(String) -> Ord
do
   let n = 23
   let p = 16

   {* Note: the `fn<Type>()` syntax has not been stabilized yet *}
   n.is<Prime>().println()  {* prints `TRUE` *}
   p.is_prime().println()  {* prints `FALSE` *}
end
